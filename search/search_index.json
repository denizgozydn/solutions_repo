{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Mechanics Problem 1: Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation To derive the governing equations of motion for a projectile, we start with Newton\u2019s second law in a vacuum (no air resistance). The motion occurs in two dimensions: horizontal (x) and vertical (y). The only force acting is gravity, with acceleration $ g $, directed downward. Equations of Motion Horizontal motion : No acceleration, so: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ where \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, and $ t $ is time. - Vertical motion : Acceleration is $ -g $, so: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Solving for Time of Flight The projectile returns to the ground when $ y(t) = 0 $: $$ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Factorizing: $$ t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 $$ Solutions: $ t = 0 $ (launch) or: $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This is the time of flight. Range Equation Substitute the time of flight into the horizontal equation: $$ R = x\\left(\\frac{2 v_0 \\sin(\\theta)}{g}\\right) = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} = \\frac{2 v_0^2 \\sin(\\theta) \\cos(\\theta)}{g} $$ Using the trigonometric identity $ \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) $: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This is the range as a function of the angle of projection. Different initial conditions ($ v_0 $, $ g $) yield a family of solutions, scaling the range accordingly. 2. Analysis of the Range The range $R $depends on $ \\theta$ through $ \\sin(2\\theta) $: R \\(is maximized when\\) \\sin(2\\theta) = 1$, i.e., $ 2\\theta = 90^\\circ $, so \\(\\theta = 45^\\circ\\) . R = 0 $when $ \\sin(2\\theta) = 0$, i.e., $ \\theta = 0^\\circ$ or \\(\\theta = 90^\\circ\\) . The relationship is symmetric about \\(45^\\circ\\) (e.g., \\(\\theta = 30^\\circ\\) and \\(60^\\circ\\) give the same range). Influence of Other Parameters: Initial Velocity$ v_0 $: \\(R \\propto v_0^2\\) , so doubling \\(v_0\\) quadruples the range. Gravitational Acceleration$ g $: $ R \\propto \\frac{1}{g} \\(, so a smaller\\) g $(e.g., on the Moon) increases the range. 3. Practical Applications This model assumes a flat surface and no air resistance, but it can be adapted: - Uneven Terrain : Adjust the landing height in the vertical equation, solving for $ t $ when $ y(t) = h $. This complicates the range formula. - Air Resistance : Introduce a drag force proportional to velocity (e.g., $ F_d = -k v $), turning the equations into nonlinear differential equations, typically solved numerically. - Real-World Examples : Artillery, sports (e.g., golf, soccer), or space launches (with modified $ g $). . import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # gravitational acceleration (m/s^2) Function to calculate range def calculate_range(v0, theta_deg): theta_rad = np.radians(theta_deg) # Convert degrees to radians R = (v0**2 * np.sin(2 * theta_rad)) / g return R Angles from 0 to 90 degrees theta = np.linspace(0, 90, 181) # 181 points for smooth curve Different initial velocities v0_values = [10, 20, 30] # m/s Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: R = calculate_range(v0, theta) plt.plot(theta, R, label=f'v0 = {v0} m/s') Formatting the plot plt.title('Range vs Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#mechanics","text":"","title":"Mechanics"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Problem 1: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"To derive the governing equations of motion for a projectile, we start with Newton\u2019s second law in a vacuum (no air resistance). The motion occurs in two dimensions: horizontal (x) and vertical (y). The only force acting is gravity, with acceleration $ g $, directed downward.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"Horizontal motion : No acceleration, so: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ where \\(v_0\\) is the initial velocity, \\(\\theta\\) is the angle of projection, and $ t $ is time. - Vertical motion : Acceleration is $ -g $, so: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solving-for-time-of-flight","text":"The projectile returns to the ground when $ y(t) = 0 $: $$ 0 = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Factorizing: $$ t \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g t \\right) = 0 $$ Solutions: $ t = 0 $ (launch) or: $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ This is the time of flight.","title":"Solving for Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"Substitute the time of flight into the horizontal equation: $$ R = x\\left(\\frac{2 v_0 \\sin(\\theta)}{g}\\right) = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} = \\frac{2 v_0^2 \\sin(\\theta) \\cos(\\theta)}{g} $$ Using the trigonometric identity $ \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) $: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This is the range as a function of the angle of projection. Different initial conditions ($ v_0 $, $ g $) yield a family of solutions, scaling the range accordingly.","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range $R $depends on $ \\theta$ through $ \\sin(2\\theta) $: R \\(is maximized when\\) \\sin(2\\theta) = 1$, i.e., $ 2\\theta = 90^\\circ $, so \\(\\theta = 45^\\circ\\) . R = 0 $when $ \\sin(2\\theta) = 0$, i.e., $ \\theta = 0^\\circ$ or \\(\\theta = 90^\\circ\\) . The relationship is symmetric about \\(45^\\circ\\) (e.g., \\(\\theta = 30^\\circ\\) and \\(60^\\circ\\) give the same range). Influence of Other Parameters: Initial Velocity$ v_0 $: \\(R \\propto v_0^2\\) , so doubling \\(v_0\\) quadruples the range. Gravitational Acceleration$ g $: $ R \\propto \\frac{1}{g} \\(, so a smaller\\) g $(e.g., on the Moon) increases the range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model assumes a flat surface and no air resistance, but it can be adapted: - Uneven Terrain : Adjust the landing height in the vertical equation, solving for $ t $ when $ y(t) = h $. This complicates the range formula. - Air Resistance : Introduce a drag force proportional to velocity (e.g., $ F_d = -k v $), turning the equations into nonlinear differential equations, typically solved numerically. - Real-World Examples : Artillery, sports (e.g., golf, soccer), or space launches (with modified $ g $). . import numpy as np import matplotlib.pyplot as plt","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # gravitational acceleration (m/s^2)","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-calculate-range","text":"def calculate_range(v0, theta_deg): theta_rad = np.radians(theta_deg) # Convert degrees to radians R = (v0**2 * np.sin(2 * theta_rad)) / g return R","title":"Function to calculate range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#angles-from-0-to-90-degrees","text":"theta = np.linspace(0, 90, 181) # 181 points for smooth curve","title":"Angles from 0 to 90 degrees"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#different-initial-velocities","text":"v0_values = [10, 20, 30] # m/s","title":"Different initial velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plotting","text":"plt.figure(figsize=(10, 6)) for v0 in v0_values: R = calculate_range(v0, theta) plt.plot(theta, R, label=f'v0 = {v0} m/s')","title":"Plotting"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#formatting-the-plot","text":"plt.title('Range vs Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.grid(True) plt.legend() plt.show()","title":"Formatting the plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping, restoring forces, and external driving forces. By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including resonance, chaos, and quasiperiodic behavior. These phenomena serve as a foundation for understanding complex real-world systems, such as driven oscillators, climate systems, and mechanical structures under periodic stress. Adding forcing introduces new parameters, such as the amplitude and frequency of the external force, which significantly affect the pendulum's behavior. By systematically varying these parameters, a diverse class of solutions can be observed, including synchronized oscillations, chaotic motion, and resonance phenomena. These behaviors not only highlight fundamental physics principles but also provide insights into engineering applications such as energy harvesting, vibration isolation, and mechanical resonance. Task 1: Theoretical Foundation Differential Equation The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin(\\theta) = F\\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient (s\u207b\u00b9) - \\(g\\) : Gravitational acceleration (m/s\u00b2) - \\(L\\) : Pendulum length (m) - \\(F\\) : Driving force amplitude (s\u207b\u00b2) - \\(\\omega\\) : Driving frequency (rad/s) Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2\\theta = F\\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. This is a linear second-order differential equation with a harmonic forcing term. General Solution The general solution to this differential equation consists of two parts: 1. Homogeneous solution (transient response): $$ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) $$ where \\(\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\) . Particular solution (steady-state response): $$ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) $$ where $$ A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} $$ and $$ \\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right). $$ Resonance Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . For light damping ( \\(b \\ll \\omega_0\\) ), the amplitude \\(A_p\\) peaks sharply near \\(\\omega = \\omega_0\\) , amplifying the system's energy significantly. Analysis of Dynamics Parameter Effects Damping Coefficient (b): Higher \\(b\\) reduces oscillation amplitude and suppresses chaos, stabilizing the system. Driving Amplitude (F): Larger \\(F\\) can push the system from periodic to chaotic motion. Driving Frequency ( \\(\\omega\\) ): Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , the system may exhibit quasiperiodic or chaotic behavior. Transition to Chaos For large \\(F\\) or specific \\(\\omega\\) , the nonlinear term \\(\\sin(\\theta)\\) dominates, leading to chaotic motion. This transition is evident in phase portraits and Poincar\u00e9 sections, where trajectories shift from closed loops (periodic) to scattered points (chaotic). Practical Applications Energy Harvesting: Oscillatory motion in forced pendulums can be converted to electrical energy. Suspension Bridges: Damping and forcing model wind-induced vibrations. Oscillating Circuits: Analogous to driven RLC circuits, where resonance and damping play similar roles. Implementation Below is a Python script simulating the forced damped pendulum using the 4th-order Runge-Kutta (RK4) method. It includes visualizations of motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint Parameters Investigating the Dynamics of a Forced Damped Pendulum 1. Parameters and Nonlinear Differential Equation Parameters: The equation of motion for the forced damped pendulum is given by: Parameters: - Parameters: \\(g = 9.81 \\, \\text{m/s}^2\\) \u2014 Gravitational acceleration \\(L = 1.0 \\, \\text{m}\\) \u2014 Pendulum length \\(b = 0.5 \\, \\text{s}^{-1}\\) \u2014 Damping coefficient \\(F = 1.2 \\, \\text{s}^{-2}\\) \u2014 Driving force amplitude \\(\\omega = \\frac{2}{3} \\, \\text{rad/s}\\) \u2014 Driving frequency \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) \u2014 Natural frequency \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = F \\cos(\\omega t) \\] For small angles, we can approximate \\( \\sin(\\theta) \\approx \\theta \\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = F \\cos(\\omega t) \\] 2. Solution of the Differential Equation The general solution consists of two parts: Homogeneous solution (transient solution): \\[ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) \\] Where \\( \\omega_r = \\sqrt{\\omega_0^2 - \\left( \\frac{b}{2} \\right)^2} \\) is the damped natural frequency. Particular solution (steady-state solution): \\[ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) \\] Where: - \\( A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}} \\) - \\( \\delta = \\tan^{-1} \\left( \\frac{b \\omega}{\\omega_0^2 - \\omega^2} \\right) \\) 3. Python Code Implementation Below is the Python code to simulate the motion of a forced damped pendulum and visualize the behavior. The simulation will observe the pendulum\u2019s motion for different initial conditions and parameter combinations. ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint Parameters g = 9.81 # Gravitational acceleration (m/s^2) L = 1.0 # Pendulum length (m) b = 0.5 # Damping coefficient (s^-1) F = 1.2 # Driving amplitude (s^-2) omega = 2/3 # Driving frequency (rad/s) omega_0 = np.sqrt(g / L) # Natural frequency Differential equation def pendulum_deriv(state, t, b, omega_0, F, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -b * theta_dot - omega_0**2 * np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] Time array t = np.linspace(0, 50, 10000) Initial conditions theta0 = 0.1 # Initial angle (rad) theta_dot0 = 0.0 # Initial angular velocity (rad/s) state0 = [theta0, theta_dot0] Solve ODE sol = odeint(pendulum_deriv, state0, t, args=(b, omega_0, F, omega)) theta, theta_dot = sol.T Poincar\u00e9 section (sampling at driving period) T = 2 * np.pi / omega # Driving period poincare_indices = np.arange(0, len(t), int(T / (t[1] - t[0]))) poincare_theta = theta[poincare_indices] poincare_theta_dot = theta_dot[poincare_indices] Plotting plt.figure(figsize=(15, 10)) Time series plt.subplot(2, 2, 1) plt.plot(t, theta, 'b-', label=r' \\(\\theta(t)\\) ') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Pendulum Motion') plt.legend() Phase portrait plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r-', lw=0.5) plt.xlabel(r' \\(\\theta\\) (rad)') plt.ylabel(r' \\(\\dot{\\theta}\\) (rad/s)') plt.title('Phase Portrait') Poincar\u00e9 section plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='g') plt.xlabel(r' \\(\\theta\\) (rad)') plt.ylabel(r' \\(\\dot{\\theta}\\) (rad/s)') plt.title('Poincar\u00e9 Section') plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping, restoring forces, and external driving forces. By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including resonance, chaos, and quasiperiodic behavior. These phenomena serve as a foundation for understanding complex real-world systems, such as driven oscillators, climate systems, and mechanical structures under periodic stress. Adding forcing introduces new parameters, such as the amplitude and frequency of the external force, which significantly affect the pendulum's behavior. By systematically varying these parameters, a diverse class of solutions can be observed, including synchronized oscillations, chaotic motion, and resonance phenomena. These behaviors not only highlight fundamental physics principles but also provide insights into engineering applications such as energy harvesting, vibration isolation, and mechanical resonance.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#task-1-theoretical-foundation","text":"","title":"Task 1: Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation","text":"The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin(\\theta) = F\\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement (radians) - \\(b\\) : Damping coefficient (s\u207b\u00b9) - \\(g\\) : Gravitational acceleration (m/s\u00b2) - \\(L\\) : Pendulum length (m) - \\(F\\) : Driving force amplitude (s\u207b\u00b2) - \\(\\omega\\) : Driving frequency (rad/s)","title":"Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), \\(\\sin(\\theta) \\approx \\theta\\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2\\theta = F\\cos(\\omega t) \\] Where \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency. This is a linear second-order differential equation with a harmonic forcing term.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#general-solution","text":"The general solution to this differential equation consists of two parts: 1. Homogeneous solution (transient response): $$ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) $$ where \\(\\omega_r = \\sqrt{\\omega_0^2 - \\left(\\frac{b}{2}\\right)^2}\\) . Particular solution (steady-state response): $$ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) $$ where $$ A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b\\omega)^2}} $$ and $$ \\delta = \\tan^{-1}\\left(\\frac{b\\omega}{\\omega_0^2 - \\omega^2}\\right). $$","title":"General Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . For light damping ( \\(b \\ll \\omega_0\\) ), the amplitude \\(A_p\\) peaks sharply near \\(\\omega = \\omega_0\\) , amplifying the system's energy significantly.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"","title":"Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping Coefficient (b): Higher \\(b\\) reduces oscillation amplitude and suppresses chaos, stabilizing the system. Driving Amplitude (F): Larger \\(F\\) can push the system from periodic to chaotic motion. Driving Frequency ( \\(\\omega\\) ): Near \\(\\omega_0\\) , resonance amplifies motion; far from \\(\\omega_0\\) , the system may exhibit quasiperiodic or chaotic behavior.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"For large \\(F\\) or specific \\(\\omega\\) , the nonlinear term \\(\\sin(\\theta)\\) dominates, leading to chaotic motion. This transition is evident in phase portraits and Poincar\u00e9 sections, where trajectories shift from closed loops (periodic) to scattered points (chaotic).","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Energy Harvesting: Oscillatory motion in forced pendulums can be converted to electrical energy. Suspension Bridges: Damping and forcing model wind-induced vibrations. Oscillating Circuits: Analogous to driven RLC circuits, where resonance and damping play similar roles.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implementation","text":"Below is a Python script simulating the forced damped pendulum using the 4th-order Runge-Kutta (RK4) method. It includes visualizations of motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum_1","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-parameters-and-nonlinear-differential-equation","text":"Parameters: The equation of motion for the forced damped pendulum is given by: Parameters: - Parameters: \\(g = 9.81 \\, \\text{m/s}^2\\) \u2014 Gravitational acceleration \\(L = 1.0 \\, \\text{m}\\) \u2014 Pendulum length \\(b = 0.5 \\, \\text{s}^{-1}\\) \u2014 Damping coefficient \\(F = 1.2 \\, \\text{s}^{-2}\\) \u2014 Driving force amplitude \\(\\omega = \\frac{2}{3} \\, \\text{rad/s}\\) \u2014 Driving frequency \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) \u2014 Natural frequency \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = F \\cos(\\omega t) \\] For small angles, we can approximate \\( \\sin(\\theta) \\approx \\theta \\) , simplifying the equation to: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = F \\cos(\\omega t) \\]","title":"1. Parameters and Nonlinear Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-solution-of-the-differential-equation","text":"The general solution consists of two parts: Homogeneous solution (transient solution): \\[ \\theta_h(t) = A e^{-\\frac{b}{2}t} \\cos(\\omega_r t + \\phi) \\] Where \\( \\omega_r = \\sqrt{\\omega_0^2 - \\left( \\frac{b}{2} \\right)^2} \\) is the damped natural frequency. Particular solution (steady-state solution): \\[ \\theta_p(t) = A_p \\cos(\\omega t - \\delta) \\] Where: - \\( A_p = \\frac{F}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}} \\) - \\( \\delta = \\tan^{-1} \\left( \\frac{b \\omega}{\\omega_0^2 - \\omega^2} \\right) \\)","title":"2. Solution of the Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-python-code-implementation","text":"Below is the Python code to simulate the motion of a forced damped pendulum and visualize the behavior. The simulation will observe the pendulum\u2019s motion for different initial conditions and parameter combinations. ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint","title":"3. Python Code Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters_1","text":"g = 9.81 # Gravitational acceleration (m/s^2) L = 1.0 # Pendulum length (m) b = 0.5 # Damping coefficient (s^-1) F = 1.2 # Driving amplitude (s^-2) omega = 2/3 # Driving frequency (rad/s) omega_0 = np.sqrt(g / L) # Natural frequency","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation_1","text":"def pendulum_deriv(state, t, b, omega_0, F, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -b * theta_dot - omega_0**2 * np.sin(theta) + F * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt]","title":"Differential equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-array","text":"t = np.linspace(0, 50, 10000)","title":"Time array"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"theta0 = 0.1 # Initial angle (rad) theta_dot0 = 0.0 # Initial angular velocity (rad/s) state0 = [theta0, theta_dot0]","title":"Initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solve-ode","text":"sol = odeint(pendulum_deriv, state0, t, args=(b, omega_0, F, omega)) theta, theta_dot = sol.T","title":"Solve ODE"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section-sampling-at-driving-period","text":"T = 2 * np.pi / omega # Driving period poincare_indices = np.arange(0, len(t), int(T / (t[1] - t[0]))) poincare_theta = theta[poincare_indices] poincare_theta_dot = theta_dot[poincare_indices]","title":"Poincar\u00e9 section (sampling at driving period)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plotting","text":"plt.figure(figsize=(15, 10))","title":"Plotting"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-series","text":"plt.subplot(2, 2, 1) plt.plot(t, theta, 'b-', label=r' \\(\\theta(t)\\) ') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title('Pendulum Motion') plt.legend()","title":"Time series"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-portrait","text":"plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r-', lw=0.5) plt.xlabel(r' \\(\\theta\\) (rad)') plt.ylabel(r' \\(\\dot{\\theta}\\) (rad/s)') plt.title('Phase Portrait')","title":"Phase portrait"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#poincare-section","text":"plt.subplot(2, 2, 3) plt.scatter(poincare_theta, poincare_theta_dot, s=5, c='g') plt.xlabel(r' \\(\\theta\\) (rad)') plt.ylabel(r' \\(\\dot{\\theta}\\) (rad/s)') plt.title('Poincar\u00e9 Section') plt.tight_layout() plt.show()","title":"Poincar\u00e9 section"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius Introduction Kepler's Third Law of Planetary Motion states that the square of a planet's orbital period is directly proportional to the cube of its orbital radius. This relationship holds true for circular orbits and has significant implications for understanding celestial mechanics, orbital dynamics, and gravitational interactions. In this document, we will: 1. Derive the relationship between the orbital period and orbital radius for circular orbits. 2. Discuss the implications for astronomy. 3. Analyze real-world examples like the Moon\u2019s orbit around Earth. 4. Implement a computational model to simulate circular orbits and verify the relationship. Kepler\u2019s Third Law Derivation Kepler\u2019s Third Law for circular orbits can be derived using Newton\u2019s Law of Universal Gravitation. The gravitational force between two masses \\(M\\) (the central body) and \\(m\\) (the orbiting body) provides the centripetal force required for circular motion. Step 1: Gravitational Force The gravitational force between two objects is given by: \\[ F_{\\text{gravity}} = \\frac{GMm}{r^2} \\] Where: - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ), - \\(M\\) is the mass of the central object (e.g., Earth), - \\(m\\) is the mass of the orbiting object (e.g., satellite, planet), - \\(r\\) is the orbital radius (distance between the two objects). Step 2: Centripetal Force For circular motion, the centripetal force is provided by the gravitational force: \\[ F_{\\text{centripetal}} = \\frac{mv^2}{r} \\] Where \\(v\\) is the orbital velocity. Step 3: Orbital Velocity and Period The orbital velocity \\(v\\) can be related to the orbital period \\(T\\) by: \\[ v = \\frac{2 \\pi r}{T} \\] Substituting this into the equation for centripetal force: \\[ \\frac{m \\left(\\frac{2 \\pi r}{T}\\right)^2}{r} = \\frac{GMm}{r^2} \\] Simplifying the equation: \\[ \\frac{4 \\pi^2 r^2}{T^2 r} = \\frac{GM}{r^2} \\] \\[ \\frac{4 \\pi^2 r}{T^2} = \\frac{GM}{r^2} \\] Rearranging to solve for \\(T^2\\) : \\[ T^2 = \\frac{4 \\pi^2 r^3}{GM} \\] Thus, the square of the orbital period is proportional to the cube of the orbital radius: \\[ T^2 \\propto r^3 \\] This is the mathematical form of Kepler\u2019s Third Law for circular orbits. Implications for Astronomy Kepler\u2019s Third Law has far-reaching implications in astronomy: Determining Planetary Distances : By measuring the orbital period of a planet and knowing the mass of the central star (e.g., the Sun), we can calculate the orbital radius. This relationship allows astronomers to determine the distances between planets and stars. Calculating Planetary Masses : For satellites and other objects orbiting a known central body (like a moon around a planet), the orbital period and radius can be used to estimate the mass of the central body. Understanding Orbital Mechanics : The law helps explain the stability of orbits and the influence of gravitational forces on orbital bodies. Simulating Orbits : The relationship allows for simulations of satellite orbits and planetary motions. It forms the basis for more complex orbital dynamics in both circular and elliptical orbits. Real-World Example: The Moon\u2019s Orbit Around Earth The Moon\u2019s orbit around Earth provides a clear example of Kepler\u2019s Third Law in action. The Moon\u2019s orbital period is approximately 27.3 days, and its average orbital radius is 384,400 km. Using Kepler\u2019s Third Law, we can calculate the mass of the Earth if we know the orbital period and radius of the Moon. Python Implementation We can simulate circular orbits using Kepler\u2019s Third Law and visualize the relationship between orbital period and orbital radius. Code for Orbital Simulation ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M = 5.972e24 # Mass of Earth in kg Function to calculate orbital period using Kepler's Third Law def orbital_period(radius): return 2 * np.pi * np.sqrt(radius**3 / (G * M)) Generate orbital radii from 1000 km to 1 million km radii = np.linspace(1000e3, 1e7, 100) Calculate orbital periods periods = orbital_period(radii) Plotting the relationship between orbital period and radius plt.figure(figsize=(8, 6)) plt.plot(radii, periods, label=r' \\(T^2 \\propto r^3\\) ', color='b') plt.title('Orbital Period vs Orbital Radius') plt.xlabel('Orbital Radius (m)') plt.ylabel('Orbital Period (s)') plt.grid(True) plt.legend() plt.show() .","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#introduction","text":"Kepler's Third Law of Planetary Motion states that the square of a planet's orbital period is directly proportional to the cube of its orbital radius. This relationship holds true for circular orbits and has significant implications for understanding celestial mechanics, orbital dynamics, and gravitational interactions. In this document, we will: 1. Derive the relationship between the orbital period and orbital radius for circular orbits. 2. Discuss the implications for astronomy. 3. Analyze real-world examples like the Moon\u2019s orbit around Earth. 4. Implement a computational model to simulate circular orbits and verify the relationship.","title":"Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-derivation","text":"Kepler\u2019s Third Law for circular orbits can be derived using Newton\u2019s Law of Universal Gravitation. The gravitational force between two masses \\(M\\) (the central body) and \\(m\\) (the orbiting body) provides the centripetal force required for circular motion.","title":"Kepler\u2019s Third Law Derivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-1-gravitational-force","text":"The gravitational force between two objects is given by: \\[ F_{\\text{gravity}} = \\frac{GMm}{r^2} \\] Where: - \\(G\\) is the gravitational constant ( \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ), - \\(M\\) is the mass of the central object (e.g., Earth), - \\(m\\) is the mass of the orbiting object (e.g., satellite, planet), - \\(r\\) is the orbital radius (distance between the two objects).","title":"Step 1: Gravitational Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-2-centripetal-force","text":"For circular motion, the centripetal force is provided by the gravitational force: \\[ F_{\\text{centripetal}} = \\frac{mv^2}{r} \\] Where \\(v\\) is the orbital velocity.","title":"Step 2: Centripetal Force"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-3-orbital-velocity-and-period","text":"The orbital velocity \\(v\\) can be related to the orbital period \\(T\\) by: \\[ v = \\frac{2 \\pi r}{T} \\] Substituting this into the equation for centripetal force: \\[ \\frac{m \\left(\\frac{2 \\pi r}{T}\\right)^2}{r} = \\frac{GMm}{r^2} \\] Simplifying the equation: \\[ \\frac{4 \\pi^2 r^2}{T^2 r} = \\frac{GM}{r^2} \\] \\[ \\frac{4 \\pi^2 r}{T^2} = \\frac{GM}{r^2} \\] Rearranging to solve for \\(T^2\\) : \\[ T^2 = \\frac{4 \\pi^2 r^3}{GM} \\] Thus, the square of the orbital period is proportional to the cube of the orbital radius: \\[ T^2 \\propto r^3 \\] This is the mathematical form of Kepler\u2019s Third Law for circular orbits.","title":"Step 3: Orbital Velocity and Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications-for-astronomy","text":"Kepler\u2019s Third Law has far-reaching implications in astronomy: Determining Planetary Distances : By measuring the orbital period of a planet and knowing the mass of the central star (e.g., the Sun), we can calculate the orbital radius. This relationship allows astronomers to determine the distances between planets and stars. Calculating Planetary Masses : For satellites and other objects orbiting a known central body (like a moon around a planet), the orbital period and radius can be used to estimate the mass of the central body. Understanding Orbital Mechanics : The law helps explain the stability of orbits and the influence of gravitational forces on orbital bodies. Simulating Orbits : The relationship allows for simulations of satellite orbits and planetary motions. It forms the basis for more complex orbital dynamics in both circular and elliptical orbits.","title":"Implications for Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-example-the-moons-orbit-around-earth","text":"The Moon\u2019s orbit around Earth provides a clear example of Kepler\u2019s Third Law in action. The Moon\u2019s orbital period is approximately 27.3 days, and its average orbital radius is 384,400 km. Using Kepler\u2019s Third Law, we can calculate the mass of the Earth if we know the orbital period and radius of the Moon.","title":"Real-World Example: The Moon\u2019s Orbit Around Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-implementation","text":"We can simulate circular orbits using Kepler\u2019s Third Law and visualize the relationship between orbital period and orbital radius.","title":"Python Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#code-for-orbital-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"Code for Orbital Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M = 5.972e24 # Mass of Earth in kg","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#function-to-calculate-orbital-period-using-keplers-third-law","text":"def orbital_period(radius): return 2 * np.pi * np.sqrt(radius**3 / (G * M))","title":"Function to calculate orbital period using Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#generate-orbital-radii-from-1000-km-to-1-million-km","text":"radii = np.linspace(1000e3, 1e7, 100)","title":"Generate orbital radii from 1000 km to 1 million km"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculate-orbital-periods","text":"periods = orbital_period(radii)","title":"Calculate orbital periods"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-the-relationship-between-orbital-period-and-radius","text":"plt.figure(figsize=(8, 6)) plt.plot(radii, periods, label=r' \\(T^2 \\propto r^3\\) ', color='b') plt.title('Orbital Period vs Orbital Radius') plt.xlabel('Orbital Radius (m)') plt.ylabel('Orbital Period (s)') plt.grid(True) plt.legend() plt.show() .","title":"Plotting the relationship between orbital period and radius"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities Introduction In the field of celestial mechanics, the concept of escape velocity is crucial for understanding the conditions required to leave a celestial body's gravitational influence. The escape velocity is the minimum velocity an object must have in order to break free from the gravitational pull of a planet or star. There are also three important cosmic velocities: 1. First Cosmic Velocity : The velocity required for a body to enter a stable orbit around a celestial body. 2. Second Cosmic Velocity (Escape Velocity) : The velocity needed to escape the gravitational pull of a celestial body. 3. Third Cosmic Velocity : The velocity required to escape the gravitational influence of a star system, such as the Solar System. These concepts are foundational in space exploration, from launching satellites to interplanetary missions. Definitions of Cosmic Velocities 1. First Cosmic Velocity The first cosmic velocity is the orbital velocity required for an object to move in a stable, circular orbit around a celestial body. This velocity can be derived from the balance between the gravitational force and the centripetal force that keeps the object in orbit. The formula for the first cosmic velocity \\(v_1\\) is: \\[ v_1 = \\sqrt{\\frac{GM}{r}} \\] Where: - \\(G\\) is the gravitational constant \\((6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2})\\) , - \\(M\\) is the mass of the central body (e.g., Earth, Mars, Jupiter), - \\(r\\) is the radius of the orbit (distance from the center of the celestial body to the object in orbit). 2. Second Cosmic Velocity (Escape Velocity) The second cosmic velocity is the escape velocity. It is the minimum velocity needed to escape the gravitational influence of a celestial body without further propulsion. The escape velocity \\(v_e\\) is given by: \\[ v_e = \\sqrt{\\frac{2GM}{r}} \\] Where: - \\(G\\) is the gravitational constant, - \\(M\\) is the mass of the celestial body, - \\(r\\) is the distance from the center of the body to the point of escape. 3. Third Cosmic Velocity The third cosmic velocity is the velocity required to escape the gravitational influence of a star system, such as the Solar System. This velocity depends on the mass of the central star and the distance from the star. The third cosmic velocity \\(v_3\\) is given by: \\[ v_3 = \\sqrt{\\frac{2GM_{\\text{star}}}{r_{\\text{star}}}} \\] Where: - \\(G\\) is the gravitational constant, - \\(M_{\\text{star}}\\) is the mass of the central star (e.g., the Sun), - \\(r_{\\text{star}}\\) is the distance from the star at which the object is located. Parameters Affecting These Velocities Mass of the Celestial Body : The greater the mass of the celestial body, the higher the required velocity for orbiting or escaping. Radius of the Celestial Body : The closer the object is to the center of the celestial body (or the star), the higher the required velocity. Distance from the Star : For the third cosmic velocity, the distance from the central star influences the escape velocity from the star system. Python Implementation Code to Calculate and Visualize Cosmic Velocities The following Python code calculates and visualizes the first, second, and third cosmic velocities for different celestial bodies such as Earth, Mars, and Jupiter. ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 Masses (kg) and radii (m) for Earth, Mars, Jupiter, and the Sun bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6}, 'Mars': {'mass': 0.64171e24, 'radius': 3.396e6}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.991e7}, 'Sun': {'mass': 1.989e30, 'radius': 6.9634e8}, } Function to calculate the first cosmic velocity def first_cosmic_velocity(mass, radius): return np.sqrt(G * mass / radius) Function to calculate the second cosmic velocity (escape velocity) def second_cosmic_velocity(mass, radius): return np.sqrt(2 * G * mass / radius) Function to calculate the third cosmic velocity (escape velocity from star system) def third_cosmic_velocity(mass_star, radius_star): return np.sqrt(2 * G * mass_star / radius_star) Calculate velocities for each body velocities = {} for body, params in bodies.items(): if body != 'Sun': v1 = first_cosmic_velocity(params['mass'], params['radius']) v2 = second_cosmic_velocity(params['mass'], params['radius']) velocities[body] = {'v1': v1, 'v2': v2} else: # For Sun, calculating third cosmic velocity v3 = third_cosmic_velocity(params['mass'], params['radius']) velocities[body] = {'v3': v3} Plotting the velocities plt.figure(figsize=(10, 6)) labels = [] v1_vals = [] v2_vals = [] v3_vals = [] Plot the velocities for Earth, Mars, Jupiter, and Sun for body, vel in velocities.items(): if body != 'Sun': labels.append(body + ' - First Cosmic Velocity (m/s)') v1_vals.append(vel['v1']) labels.append(body + ' - Second Cosmic Velocity (m/s)') v2_vals.append(vel['v2']) else: labels.append(body + ' - Third Cosmic Velocity (m/s)') v3_vals.append(vel['v3']) Combined bar chart for velocities x = np.arange(len(labels)) velocities_all = v1_vals + v2_vals + v3_vals plt.bar(x, velocities_all, tick_label=labels) plt.xlabel('Celestial Bodies and Velocities') plt.ylabel('Velocity (m/s)') plt.title('Escape and Cosmic Velocities for Different Celestial Bodies') plt.xticks(rotation=90) plt.grid(True) plt.tight_layout() plt.show() .","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#introduction","text":"In the field of celestial mechanics, the concept of escape velocity is crucial for understanding the conditions required to leave a celestial body's gravitational influence. The escape velocity is the minimum velocity an object must have in order to break free from the gravitational pull of a planet or star. There are also three important cosmic velocities: 1. First Cosmic Velocity : The velocity required for a body to enter a stable orbit around a celestial body. 2. Second Cosmic Velocity (Escape Velocity) : The velocity needed to escape the gravitational pull of a celestial body. 3. Third Cosmic Velocity : The velocity required to escape the gravitational influence of a star system, such as the Solar System. These concepts are foundational in space exploration, from launching satellites to interplanetary missions.","title":"Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions-of-cosmic-velocities","text":"","title":"Definitions of Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-first-cosmic-velocity","text":"The first cosmic velocity is the orbital velocity required for an object to move in a stable, circular orbit around a celestial body. This velocity can be derived from the balance between the gravitational force and the centripetal force that keeps the object in orbit. The formula for the first cosmic velocity \\(v_1\\) is: \\[ v_1 = \\sqrt{\\frac{GM}{r}} \\] Where: - \\(G\\) is the gravitational constant \\((6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2})\\) , - \\(M\\) is the mass of the central body (e.g., Earth, Mars, Jupiter), - \\(r\\) is the radius of the orbit (distance from the center of the celestial body to the object in orbit).","title":"1. First Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-second-cosmic-velocity-escape-velocity","text":"The second cosmic velocity is the escape velocity. It is the minimum velocity needed to escape the gravitational influence of a celestial body without further propulsion. The escape velocity \\(v_e\\) is given by: \\[ v_e = \\sqrt{\\frac{2GM}{r}} \\] Where: - \\(G\\) is the gravitational constant, - \\(M\\) is the mass of the celestial body, - \\(r\\) is the distance from the center of the body to the point of escape.","title":"2. Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-third-cosmic-velocity","text":"The third cosmic velocity is the velocity required to escape the gravitational influence of a star system, such as the Solar System. This velocity depends on the mass of the central star and the distance from the star. The third cosmic velocity \\(v_3\\) is given by: \\[ v_3 = \\sqrt{\\frac{2GM_{\\text{star}}}{r_{\\text{star}}}} \\] Where: - \\(G\\) is the gravitational constant, - \\(M_{\\text{star}}\\) is the mass of the central star (e.g., the Sun), - \\(r_{\\text{star}}\\) is the distance from the star at which the object is located.","title":"3. Third Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#parameters-affecting-these-velocities","text":"Mass of the Celestial Body : The greater the mass of the celestial body, the higher the required velocity for orbiting or escaping. Radius of the Celestial Body : The closer the object is to the center of the celestial body (or the star), the higher the required velocity. Distance from the Star : For the third cosmic velocity, the distance from the central star influences the escape velocity from the star system.","title":"Parameters Affecting These Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-implementation","text":"","title":"Python Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#code-to-calculate-and-visualize-cosmic-velocities","text":"The following Python code calculates and visualizes the first, second, and third cosmic velocities for different celestial bodies such as Earth, Mars, and Jupiter. ```python import numpy as np import matplotlib.pyplot as plt","title":"Code to Calculate and Visualize Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#masses-kg-and-radii-m-for-earth-mars-jupiter-and-the-sun","text":"bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6}, 'Mars': {'mass': 0.64171e24, 'radius': 3.396e6}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.991e7}, 'Sun': {'mass': 1.989e30, 'radius': 6.9634e8}, }","title":"Masses (kg) and radii (m) for Earth, Mars, Jupiter, and the Sun"},{"location":"1%20Physics/2%20Gravity/Problem_2/#function-to-calculate-the-first-cosmic-velocity","text":"def first_cosmic_velocity(mass, radius): return np.sqrt(G * mass / radius)","title":"Function to calculate the first cosmic velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#function-to-calculate-the-second-cosmic-velocity-escape-velocity","text":"def second_cosmic_velocity(mass, radius): return np.sqrt(2 * G * mass / radius)","title":"Function to calculate the second cosmic velocity (escape velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#function-to-calculate-the-third-cosmic-velocity-escape-velocity-from-star-system","text":"def third_cosmic_velocity(mass_star, radius_star): return np.sqrt(2 * G * mass_star / radius_star)","title":"Function to calculate the third cosmic velocity (escape velocity from star system)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculate-velocities-for-each-body","text":"velocities = {} for body, params in bodies.items(): if body != 'Sun': v1 = first_cosmic_velocity(params['mass'], params['radius']) v2 = second_cosmic_velocity(params['mass'], params['radius']) velocities[body] = {'v1': v1, 'v2': v2} else: # For Sun, calculating third cosmic velocity v3 = third_cosmic_velocity(params['mass'], params['radius']) velocities[body] = {'v3': v3}","title":"Calculate velocities for each body"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plotting-the-velocities","text":"plt.figure(figsize=(10, 6)) labels = [] v1_vals = [] v2_vals = [] v3_vals = []","title":"Plotting the velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plot-the-velocities-for-earth-mars-jupiter-and-sun","text":"for body, vel in velocities.items(): if body != 'Sun': labels.append(body + ' - First Cosmic Velocity (m/s)') v1_vals.append(vel['v1']) labels.append(body + ' - Second Cosmic Velocity (m/s)') v2_vals.append(vel['v2']) else: labels.append(body + ' - Third Cosmic Velocity (m/s)') v3_vals.append(vel['v3'])","title":"Plot the velocities for Earth, Mars, Jupiter, and Sun"},{"location":"1%20Physics/2%20Gravity/Problem_2/#combined-bar-chart-for-velocities","text":"x = np.arange(len(labels)) velocities_all = v1_vals + v2_vals + v3_vals plt.bar(x, velocities_all, tick_label=labels) plt.xlabel('Celestial Bodies and Velocities') plt.ylabel('Velocity (m/s)') plt.title('Escape and Cosmic Velocities for Different Celestial Bodies') plt.xticks(rotation=90) plt.grid(True) plt.tight_layout() plt.show() .","title":"Combined bar chart for velocities"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of a Freely Released Payload Near Earth Introduction When an object is released from a moving rocket near Earth, its trajectory depends on the initial conditions (such as position and velocity) and gravitational forces. The analysis of these trajectories is critical in understanding payload release during space missions, such as deploying satellites, returning objects to Earth, or escaping Earth's gravity. The object can follow different types of trajectories based on its initial velocity and position relative to Earth. These trajectories can be: - Parabolic : When the object follows a path that eventually returns to Earth. - Elliptical : When the object follows an elliptical orbit around Earth. - Hyperbolic : When the object escapes Earth's gravitational influence. This document will: 1. Derive the equations of motion governing the object\u2019s trajectory. 2. Perform a numerical simulation to compute the payload's path based on given initial conditions. 3. Discuss how these trajectories relate to orbital insertion, reentry, and escape scenarios. 4. Provide a Python tool for simulating and visualizing the object's motion. Equations of Motion The motion of a payload near Earth is governed by Newton\u2019s Law of Universal Gravitation and the principles of orbital mechanics. The gravitational force acting on the object is given by: \\[ F_{\\text{gravity}} = \\frac{GMm}{r^2} \\] Where: - \\( G \\) is the gravitational constant \\((6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2})\\) , - \\( M \\) is the mass of the Earth \\((5.972 \\times 10^{24} \\, \\text{kg})\\) , - \\( m \\) is the mass of the payload, - \\( r \\) is the distance from the center of Earth to the payload. From Newton's second law, we can compute the acceleration of the payload: \\[ a = \\frac{F_{\\text{gravity}}}{m} = - \\frac{GM}{r^2} \\] This results in a second-order differential equation governing the payload\u2019s position: \\[ \\frac{d^2r}{dt^2} = - \\frac{GM}{r^2} \\] Where \\( r \\) is the distance from the center of Earth. The trajectory of the payload depends on its initial conditions (position and velocity) and the gravitational force acting on it. For simplicity, we will simulate the motion of the payload in a 2D plane assuming radial symmetry. Types of Trajectories Elliptical Trajectories : If the payload\u2019s velocity is less than escape velocity but sufficient to not fall back to Earth, it will follow an elliptical orbit. The general orbital equation for an elliptical orbit is: \\[ r(\\theta) = \\frac{a(1 - e^2)}{1 + e \\cos(\\theta)} \\] Where: - \\( a \\) is the semi-major axis of the ellipse, - \\( e \\) is the eccentricity of the orbit, - \\( \\theta \\) is the true anomaly. Parabolic Trajectories : When the initial velocity of the payload is exactly the escape velocity at a given distance, it follows a parabolic trajectory. The escape velocity \\( v_e \\) at distance \\( r \\) is: \\[ v_e = \\sqrt{\\frac{2GM}{r}} \\] Hyperbolic Trajectories : If the velocity of the payload exceeds the escape velocity at a given distance, it will follow a hyperbolic trajectory, escaping Earth's gravitational pull. Numerical Simulation We will perform a numerical integration of the equations of motion to simulate the trajectory of a payload based on initial conditions. For this, we will use the scipy.integrate.solve_ivp function, which allows us to numerically solve the system of differential equations for the position and velocity of the payload. Python Code ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Constants G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M = 5.972e24 # Mass of Earth in kg R = 6371e3 # Radius of Earth in meters Initial conditions Initial position (in meters) and velocity (in m/s) r0 = R + 100e3 # 100 km above the Earth's surface v0 = 7.12e3 # Initial velocity (in m/s) near the orbital velocity for low Earth orbit Initial angle and velocity in x and y directions theta0 = 0 # initial angle vx0 = 0 # initial velocity in x direction (in m/s) vy0 = v0 # initial velocity in y direction (in m/s) System of equations def equations(t, y): x, y, vx, vy = y r = np.sqrt(x 2 + y 2) # distance from the center of the Earth # Gravitational acceleration ax = -G * M * x / r 3 ay = -G * M * y / r 3 return [vx, vy, ax, ay] Initial conditions for the ODE solver (position and velocity) initial_conditions = [r0, 0, vx0, vy0] # Initial position and velocity in x and y Time span for the simulation (from 0 to 5000 seconds) t_span = (0, 5000) t_eval = np.linspace(0, 5000, 500) Solve the system of ODEs solution = solve_ivp(equations, t_span, initial_conditions, t_eval=t_eval) Extract the trajectory x_trajectory = solution.y[0] y_trajectory = solution.y[1] Plotting the trajectory plt.figure(figsize=(8, 8)) plt.plot(x_trajectory, y_trajectory, label=\"Trajectory of Payload\") plt.scatter(0, 0, color=\"red\", label=\"Earth\", s=100) # Earth at the origin plt.title(\"Trajectory of a Freely Released Payload Near Earth\") plt.xlabel(\"x position (m)\") plt.ylabel(\"y position (m)\") plt.axhline(0, color='black',linewidth=0.5) plt.axvline(0, color='black',linewidth=0.5) plt.grid(True) plt.legend() plt.axis(\"equal\") plt.show() .","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#introduction","text":"When an object is released from a moving rocket near Earth, its trajectory depends on the initial conditions (such as position and velocity) and gravitational forces. The analysis of these trajectories is critical in understanding payload release during space missions, such as deploying satellites, returning objects to Earth, or escaping Earth's gravity. The object can follow different types of trajectories based on its initial velocity and position relative to Earth. These trajectories can be: - Parabolic : When the object follows a path that eventually returns to Earth. - Elliptical : When the object follows an elliptical orbit around Earth. - Hyperbolic : When the object escapes Earth's gravitational influence. This document will: 1. Derive the equations of motion governing the object\u2019s trajectory. 2. Perform a numerical simulation to compute the payload's path based on given initial conditions. 3. Discuss how these trajectories relate to orbital insertion, reentry, and escape scenarios. 4. Provide a Python tool for simulating and visualizing the object's motion.","title":"Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion","text":"The motion of a payload near Earth is governed by Newton\u2019s Law of Universal Gravitation and the principles of orbital mechanics. The gravitational force acting on the object is given by: \\[ F_{\\text{gravity}} = \\frac{GMm}{r^2} \\] Where: - \\( G \\) is the gravitational constant \\((6.67430 \\times 10^{-11} \\, \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2})\\) , - \\( M \\) is the mass of the Earth \\((5.972 \\times 10^{24} \\, \\text{kg})\\) , - \\( m \\) is the mass of the payload, - \\( r \\) is the distance from the center of Earth to the payload. From Newton's second law, we can compute the acceleration of the payload: \\[ a = \\frac{F_{\\text{gravity}}}{m} = - \\frac{GM}{r^2} \\] This results in a second-order differential equation governing the payload\u2019s position: \\[ \\frac{d^2r}{dt^2} = - \\frac{GM}{r^2} \\] Where \\( r \\) is the distance from the center of Earth. The trajectory of the payload depends on its initial conditions (position and velocity) and the gravitational force acting on it. For simplicity, we will simulate the motion of the payload in a 2D plane assuming radial symmetry.","title":"Equations of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#types-of-trajectories","text":"Elliptical Trajectories : If the payload\u2019s velocity is less than escape velocity but sufficient to not fall back to Earth, it will follow an elliptical orbit. The general orbital equation for an elliptical orbit is: \\[ r(\\theta) = \\frac{a(1 - e^2)}{1 + e \\cos(\\theta)} \\] Where: - \\( a \\) is the semi-major axis of the ellipse, - \\( e \\) is the eccentricity of the orbit, - \\( \\theta \\) is the true anomaly. Parabolic Trajectories : When the initial velocity of the payload is exactly the escape velocity at a given distance, it follows a parabolic trajectory. The escape velocity \\( v_e \\) at distance \\( r \\) is: \\[ v_e = \\sqrt{\\frac{2GM}{r}} \\] Hyperbolic Trajectories : If the velocity of the payload exceeds the escape velocity at a given distance, it will follow a hyperbolic trajectory, escaping Earth's gravitational pull.","title":"Types of Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#numerical-simulation","text":"We will perform a numerical integration of the equations of motion to simulate the trajectory of a payload based on initial conditions. For this, we will use the scipy.integrate.solve_ivp function, which allows us to numerically solve the system of differential equations for the position and velocity of the payload.","title":"Numerical Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-code","text":"```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"Python Code"},{"location":"1%20Physics/2%20Gravity/Problem_3/#constants","text":"G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M = 5.972e24 # Mass of Earth in kg R = 6371e3 # Radius of Earth in meters","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions","text":"","title":"Initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-position-in-meters-and-velocity-in-ms","text":"r0 = R + 100e3 # 100 km above the Earth's surface v0 = 7.12e3 # Initial velocity (in m/s) near the orbital velocity for low Earth orbit","title":"Initial position (in meters) and velocity (in m/s)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-angle-and-velocity-in-x-and-y-directions","text":"theta0 = 0 # initial angle vx0 = 0 # initial velocity in x direction (in m/s) vy0 = v0 # initial velocity in y direction (in m/s)","title":"Initial angle and velocity in x and y directions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#system-of-equations","text":"def equations(t, y): x, y, vx, vy = y r = np.sqrt(x 2 + y 2) # distance from the center of the Earth # Gravitational acceleration ax = -G * M * x / r 3 ay = -G * M * y / r 3 return [vx, vy, ax, ay]","title":"System of equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions-for-the-ode-solver-position-and-velocity","text":"initial_conditions = [r0, 0, vx0, vy0] # Initial position and velocity in x and y","title":"Initial conditions for the ODE solver (position and velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#time-span-for-the-simulation-from-0-to-5000-seconds","text":"t_span = (0, 5000) t_eval = np.linspace(0, 5000, 500)","title":"Time span for the simulation (from 0 to 5000 seconds)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#solve-the-system-of-odes","text":"solution = solve_ivp(equations, t_span, initial_conditions, t_eval=t_eval)","title":"Solve the system of ODEs"},{"location":"1%20Physics/2%20Gravity/Problem_3/#extract-the-trajectory","text":"x_trajectory = solution.y[0] y_trajectory = solution.y[1]","title":"Extract the trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plotting-the-trajectory","text":"plt.figure(figsize=(8, 8)) plt.plot(x_trajectory, y_trajectory, label=\"Trajectory of Payload\") plt.scatter(0, 0, color=\"red\", label=\"Earth\", s=100) # Earth at the origin plt.title(\"Trajectory of a Freely Released Payload Near Earth\") plt.xlabel(\"x position (m)\") plt.ylabel(\"y position (m)\") plt.axhline(0, color='black',linewidth=0.5) plt.axvline(0, color='black',linewidth=0.5) plt.grid(True) plt.legend() plt.axis(\"equal\") plt.show() .","title":"Plotting the trajectory"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 Interference Patterns on a Water Surface Motivation Interference occurs when waves from different sources overlap, creating new patterns. On a water surface, this can be easily observed when ripples from different points meet, forming distinctive interference patterns. These patterns can show how waves combine in different ways, either reinforcing each other (constructive interference) or canceling out (destructive interference). Studying these patterns helps us understand wave behavior in a simple, visual way. It also allows us to explore important concepts, such as the relationship between wave phase and the effects of multiple sources. This task provides a hands-on approach to learning about wave interactions and their real-world applications, offering an engaging way to dive into wave physics. Task We will analyze the interference patterns formed on the water surface due to the superposition of waves emitted from point sources placed at the vertices of a chosen regular polygon. Steps to Follow Select a Regular Polygon : Choose a regular polygon (e.g., equilateral triangle, square, regular pentagon). Position the Sources : Place point wave sources at the vertices of the selected polygon. Wave Equations : Write the equations describing the waves emitted from each source, considering their respective positions. 3.1 Wave Equation from a Single Source A wave emitted from a single point source on the water surface can be described by the following equation: \\[ \\text{Displacement at point } (x, y, t) = A \\cdot \\cos(k \\cdot r - \\omega t + \\phi) \\] Where: - \\( A \\) is the amplitude of the wave, - \\( k \\) is the wave number, related to the wavelength \\( \\lambda \\) as: \\( k = \\frac{2\\pi}{\\lambda} \\) , - \\( \\omega \\) is the angular frequency, related to the frequency \\( f \\) as: \\( \\omega = 2\\pi f \\) , - \\( r \\) is the distance from the source to the point \\( (x, y) \\) , - \\( t \\) is the time, - \\( \\phi \\) is the initial phase of the wave. 3.2 Superposition of Waves When there are multiple sources, the resulting displacement at each point on the water surface is the sum of the displacements from each source. This is known as the principle of superposition: \\[ \\text{Displacement at point } (x, y, t) = \\sum_{i=1}^{n} A \\cdot \\cos(k \\cdot r_i - \\omega t + \\phi_i) \\] Where: - \\( n \\) is the number of sources (vertices of the polygon), - \\( r_i \\) is the distance from the source \\( i \\) to the point \\( (x, y) \\) , - \\( \\phi_i \\) is the initial phase of the wave emitted from source \\( i \\) . Analyze Interference Patterns : Examine the resulting displacement \\( D(x, y, t) \\) as a function of position \\( (x, y) \\) and time \\( t \\) . Identify regions of constructive interference (wave amplification) and destructive interference (wave cancellation). Visualization : Present your findings graphically, illustrating the interference patterns for the chosen regular polygon. Considerations Assume all sources emit waves with the same amplitude \\( A \\) , wavelength \\( \\lambda \\) , and frequency \\( f \\) . The waves are coherent, maintaining a constant phase difference. Use Python libraries such as Matplotlib for visualization and simulation. Python Code for Simulation and Visualization The following Python code simulates the interference patterns of waves from point sources placed at the vertices of a regular polygon. We will use the following libraries: NumPy for numerical calculations and Matplotlib for visualization. ```python import numpy as np import matplotlib.pyplot as plt Constants A = 1 # Amplitude of the waves lambda_wave = 1 # Wavelength (m) f = 1 # Frequency (Hz) omega = 2 * np.pi * f # Angular frequency k = 2 * np.pi / lambda_wave # Wave number Parameters for the regular polygon n_sides = 5 # Number of sides (vertices) of the polygon (e.g., pentagon) radius = 5 # Radius of the polygon (distance from center to vertices) theta_offset = 0 # Offset for the initial phase Generate the positions of the sources (vertices of the polygon) angles = np.linspace(0, 2 * np.pi, n_sides, endpoint=False) sources = np.array([radius * np.cos(angles), radius * np.sin(angles)]).T Generate the grid for the water surface x_grid, y_grid = np.meshgrid(np.linspace(-8, 8, 400), np.linspace(-8, 8, 400)) grid_shape = x_grid.shape Calculate the displacement at each point on the grid due to the superposition of waves def calculate_displacement(x, y, t): displacement = np.zeros_like(x) for i in range(n_sides): source = sources[i] # Calculate distance from the source to each point on the grid r = np.sqrt((x - source[0]) 2 + (y - source[1]) 2) # Calculate the wave contribution from this source displacement += A * np.cos(k * r - omega * t + theta_offset) # Superposition of waves return displacement Simulate and plot the interference pattern at a specific time time = 0 # Set the time at which we want to visualize the pattern displacement = calculate_displacement(x_grid, y_grid, time) Plot the interference pattern plt.figure(figsize=(8, 8)) plt.contourf(x_grid, y_grid, displacement, 50, cmap='RdBu') plt.colorbar(label='Displacement') plt.scatter(sources[:, 0], sources[:, 1], color='black', label='Sources', zorder=5) plt.title(f'Interference Pattern for a Regular {n_sides}-gon') plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.legend() plt.axis('equal') plt.show() .","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#interference-patterns-on-a-water-surface","text":"","title":"Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#motivation","text":"Interference occurs when waves from different sources overlap, creating new patterns. On a water surface, this can be easily observed when ripples from different points meet, forming distinctive interference patterns. These patterns can show how waves combine in different ways, either reinforcing each other (constructive interference) or canceling out (destructive interference). Studying these patterns helps us understand wave behavior in a simple, visual way. It also allows us to explore important concepts, such as the relationship between wave phase and the effects of multiple sources. This task provides a hands-on approach to learning about wave interactions and their real-world applications, offering an engaging way to dive into wave physics.","title":"Motivation"},{"location":"1%20Physics/3%20Waves/Problem_1/#task","text":"We will analyze the interference patterns formed on the water surface due to the superposition of waves emitted from point sources placed at the vertices of a chosen regular polygon.","title":"Task"},{"location":"1%20Physics/3%20Waves/Problem_1/#steps-to-follow","text":"Select a Regular Polygon : Choose a regular polygon (e.g., equilateral triangle, square, regular pentagon). Position the Sources : Place point wave sources at the vertices of the selected polygon. Wave Equations : Write the equations describing the waves emitted from each source, considering their respective positions.","title":"Steps to Follow"},{"location":"1%20Physics/3%20Waves/Problem_1/#31-wave-equation-from-a-single-source","text":"A wave emitted from a single point source on the water surface can be described by the following equation: \\[ \\text{Displacement at point } (x, y, t) = A \\cdot \\cos(k \\cdot r - \\omega t + \\phi) \\] Where: - \\( A \\) is the amplitude of the wave, - \\( k \\) is the wave number, related to the wavelength \\( \\lambda \\) as: \\( k = \\frac{2\\pi}{\\lambda} \\) , - \\( \\omega \\) is the angular frequency, related to the frequency \\( f \\) as: \\( \\omega = 2\\pi f \\) , - \\( r \\) is the distance from the source to the point \\( (x, y) \\) , - \\( t \\) is the time, - \\( \\phi \\) is the initial phase of the wave.","title":"3.1 Wave Equation from a Single Source"},{"location":"1%20Physics/3%20Waves/Problem_1/#32-superposition-of-waves","text":"When there are multiple sources, the resulting displacement at each point on the water surface is the sum of the displacements from each source. This is known as the principle of superposition: \\[ \\text{Displacement at point } (x, y, t) = \\sum_{i=1}^{n} A \\cdot \\cos(k \\cdot r_i - \\omega t + \\phi_i) \\] Where: - \\( n \\) is the number of sources (vertices of the polygon), - \\( r_i \\) is the distance from the source \\( i \\) to the point \\( (x, y) \\) , - \\( \\phi_i \\) is the initial phase of the wave emitted from source \\( i \\) . Analyze Interference Patterns : Examine the resulting displacement \\( D(x, y, t) \\) as a function of position \\( (x, y) \\) and time \\( t \\) . Identify regions of constructive interference (wave amplification) and destructive interference (wave cancellation). Visualization : Present your findings graphically, illustrating the interference patterns for the chosen regular polygon.","title":"3.2 Superposition of Waves"},{"location":"1%20Physics/3%20Waves/Problem_1/#considerations","text":"Assume all sources emit waves with the same amplitude \\( A \\) , wavelength \\( \\lambda \\) , and frequency \\( f \\) . The waves are coherent, maintaining a constant phase difference. Use Python libraries such as Matplotlib for visualization and simulation.","title":"Considerations"},{"location":"1%20Physics/3%20Waves/Problem_1/#python-code-for-simulation-and-visualization","text":"The following Python code simulates the interference patterns of waves from point sources placed at the vertices of a regular polygon. We will use the following libraries: NumPy for numerical calculations and Matplotlib for visualization. ```python import numpy as np import matplotlib.pyplot as plt","title":"Python Code for Simulation and Visualization"},{"location":"1%20Physics/3%20Waves/Problem_1/#constants","text":"A = 1 # Amplitude of the waves lambda_wave = 1 # Wavelength (m) f = 1 # Frequency (Hz) omega = 2 * np.pi * f # Angular frequency k = 2 * np.pi / lambda_wave # Wave number","title":"Constants"},{"location":"1%20Physics/3%20Waves/Problem_1/#parameters-for-the-regular-polygon","text":"n_sides = 5 # Number of sides (vertices) of the polygon (e.g., pentagon) radius = 5 # Radius of the polygon (distance from center to vertices) theta_offset = 0 # Offset for the initial phase","title":"Parameters for the regular polygon"},{"location":"1%20Physics/3%20Waves/Problem_1/#generate-the-positions-of-the-sources-vertices-of-the-polygon","text":"angles = np.linspace(0, 2 * np.pi, n_sides, endpoint=False) sources = np.array([radius * np.cos(angles), radius * np.sin(angles)]).T","title":"Generate the positions of the sources (vertices of the polygon)"},{"location":"1%20Physics/3%20Waves/Problem_1/#generate-the-grid-for-the-water-surface","text":"x_grid, y_grid = np.meshgrid(np.linspace(-8, 8, 400), np.linspace(-8, 8, 400)) grid_shape = x_grid.shape","title":"Generate the grid for the water surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#calculate-the-displacement-at-each-point-on-the-grid-due-to-the-superposition-of-waves","text":"def calculate_displacement(x, y, t): displacement = np.zeros_like(x) for i in range(n_sides): source = sources[i] # Calculate distance from the source to each point on the grid r = np.sqrt((x - source[0]) 2 + (y - source[1]) 2) # Calculate the wave contribution from this source displacement += A * np.cos(k * r - omega * t + theta_offset) # Superposition of waves return displacement","title":"Calculate the displacement at each point on the grid due to the superposition of waves"},{"location":"1%20Physics/3%20Waves/Problem_1/#simulate-and-plot-the-interference-pattern-at-a-specific-time","text":"time = 0 # Set the time at which we want to visualize the pattern displacement = calculate_displacement(x_grid, y_grid, time)","title":"Simulate and plot the interference pattern at a specific time"},{"location":"1%20Physics/3%20Waves/Problem_1/#plot-the-interference-pattern","text":"plt.figure(figsize=(8, 8)) plt.contourf(x_grid, y_grid, displacement, 50, cmap='RdBu') plt.colorbar(label='Displacement') plt.scatter(sources[:, 0], sources[:, 1], color='black', label='Sources', zorder=5) plt.title(f'Interference Pattern for a Regular {n_sides}-gon') plt.xlabel('X (m)') plt.ylabel('Y (m)') plt.legend() plt.axis('equal') plt.show() .","title":"Plot the interference pattern"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}